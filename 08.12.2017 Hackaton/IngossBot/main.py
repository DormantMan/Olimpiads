# -*- coding: utf-8 -*-

# Imports

import json
import logging
import os
import random
import sys
import threading
import time

import telebot

print(sys.executable, os.path.realpath(__file__))
# print(dir(telebot))
# print(dir(os))


logging.basicConfig(format="[%(asctime)-15s] %(levelname)s %(funcName)s: %(message)s", level=logging.INFO)


class TelegramBot:
    """ This is Bot Class

    Methods:
        send_message_thread

    """

    def __init__(self):
        self.f = FilesExchange(True)
        self.users = self.f.users
        print(self.f.config['name'], self.f.config['version'])
        self.bot = telebot.TeleBot(self.f.config['token'])

        self.markup_themes = self.markups(
            ["–ê–≤—Ç–æ—Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ", "–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è"],
            ["–ò–º—É—â–µ—Å—Ç–≤–æ", '–ó–¥–æ—Ä–æ–≤—å–µ –∏ –∂–∏–∑–Ω—å'],
            '–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –∏ –ø–µ–Ω—Å–∏—è',
            'üîô'
        )

        self.markup_menu = self.markups(
            'üóÑ –í–∏–¥—ã —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏—è',
            'üè™ –û—Ñ–∏—Å—ã',
            '–°–µ—Ä–≤–∏—Å—ã –∏ –ø–ª–∞—Ç–µ–∂–∏',
            ['FAQ', '–û –∫–æ–º–ø–∞–Ω–∏–∏']
        )

        self.themes = {
            'car': '–ê–≤—Ç–æ—Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ',
            #'–ê–≤—Ç–æ—Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ': 'car',
            'travel': '–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è',
            #'–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è': 'travel',
            'property': '–ò–º—É—â–µ—Å—Ç–≤–æ',
            #'–ò–º—É—â–µ—Å—Ç–≤–æ': 'property',
            'life': '–ó–¥–æ—Ä–æ–≤—å–µ –∏ –∂–∏–∑–Ω—å',
            #'–ó–¥–æ—Ä–æ–≤—å–µ –∏ –∂–∏–∑–Ω—å': 'life',
            'investments': '–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –∏ –ø–µ–Ω—Å–∏—è',
            #'–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –∏ –ø–µ–Ω—Å–∏—è': 'investments'
        }

        self.additional_themes = [
            (['–∞–≤—Ç–æ—Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ', '–æ—Å–∞–≥–æ', '—Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ', '–∞–≤—Ç–æ–º–æ–±–∏–ª—è', '–µ–æ—Å–∞–≥–æ', '–ø—Ä–∏—á–∏–Ω–µ–Ω–∏–µ', '–≤—Ä–µ–¥–∞', '–∏–º—É—â–µ—Å—Ç–≤—É',
              '—Ç—Ä–µ—Ç—å–∏—Ö', '–ª–∏—Ü', '–ø—Ä–∏—á–∏–Ω–µ–Ω–∏–µ', '–≤—Ä–µ–¥–∞', '–∂–∏–∑–Ω–∏', '–∏', '–∑–¥–æ—Ä–æ–≤—å—é', '—Ç—Ä–µ—Ç—å–∏—Ö', '–ª–∏—Ü', '–∫–∞—Å–∫–æ',
              '—Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ', '–∞–≤—Ç–æ–º–æ–±–∏–ª—è', '–∫–∞—Å–∫–æ', '—É—â–µ—Ä–±', '—É–≥–æ–Ω', '–∏', '–ø–æ–ª–Ω–∞—è', '–≥–∏–±–µ–ª—å', '–∑–µ–ª–µ–Ω–∞—è', '–∫–∞—Ä—Ç–∞'],
             'car', 0),

            (['–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è', '–∑–∞', '–≥—Ä–∞–Ω–∏—Ü—É', '–ø–æ', '—Ä–æ—Å—Å–∏–∏', '–º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ', '—Ä–∞—Å—Ö–æ–¥—ã', '–Ω–µ—Å—á–∞—Å—Ç–Ω—ã–π', '—Å–ª—É—á–∞–π', '—É—Ç–µ—Ä—è',
              '–±–∞–≥–∞–∂–∞', '–∑–∞–Ω—è—Ç–∏—è', '—Å–ø–æ—Ä—Ç–æ–º', '–æ—Ç–º–µ–Ω–∞', '–ø–æ–µ–∑–¥–∫–∏', '–Ω–µ–≤—ã–µ–∑–¥', '–ø–µ—Ä–≤–∏—á–Ω—ã–π', '–æ—Ç–∫–∞–∑', '–≤', '–≤–∏–∑–µ',
              '–ø–æ–≤—Ç–æ—Ä–Ω—ã–π', '–æ—Ç–∫–∞–∑', '–≤', '–≤–∏–∑–µ', '–±–æ–ª–µ–∑–Ω—å', '–∏–ª–∏', '—Ç—Ä–∞–≤–º–∞'], 'travel', 0),

            (['–∏–º—É—â–µ—Å—Ç–≤–æ', '–∫–≤–∞—Ä—Ç–∏—Ä–∞', '—Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ', '–∫–≤–∞—Ä—Ç–∏—Ä—ã', '—ç–∫—Å–ø—Ä–µ—Å—Å', '—Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ', '–∏–º—É—â–µ—Å—Ç–≤–∞', '—Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ',
              '–≥—Ä–∞–∂–¥–∞–Ω—Å–∫–æ–π', '–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏', '–Ω–∞', '—Å–ª—É—á–∞–π', '–ø—Ä–∏—á–∏–Ω–µ–Ω–∏—è', '–≤—Ä–µ–¥–∞', '—Å–æ—Å–µ–¥—è–º—Ç—Ä–µ—Ç—å–∏–º', '–ª–∏—Ü–∞–º',
              '—Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ', '–∏–º—É—â–µ—Å—Ç–≤–∞', '–Ω–∞', '–≤—Ä–µ–º—è', '–æ—Ç–ø—É—Å–∫–∞', '—Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ', '–∫–≤–∞—Ä—Ç–∏—Ä—ã', '–¥–æ–º', '–∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—ã–µ',
              '—ç–ª–µ–º–µ–Ω—Ç—ã', '–æ—Ç–¥–µ–ª–∫–∞', '–∏', '–∏–Ω–∂–µ–Ω–µ—Ä–Ω–æ–µ', '–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ', '–¥–≤–∏–∂–∏–º–æ–µ', '–∏–º—É—â–µ—Å—Ç–≤–æ', '—Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ',
              '–∫–≤–∞—Ä—Ç–∏—Ä—ã', '–ø–ª–∞—Ç–∏–Ω—É–º', '–∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—ã–µ', '—ç–ª–µ–º–µ–Ω—Ç—ã', '–æ—Ç–¥–µ–ª–∫–∞', '–∏', '–∏–Ω–∂–µ–Ω–µ—Ä–Ω–æ–µ', '–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ',
              '–¥–≤–∏–∂–∏–º–æ–µ', '–∏–º—É—â–µ—Å—Ç–≤–æ', '–∑–∞–≥–æ—Ä–æ–¥–Ω–∞—è', '–Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å', '–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å', '–∏–ø–æ—Ç–µ–∫–∞'], 'property', 0),

            (['–∑–¥–æ—Ä–æ–≤—å–µ', '–∏', '–∂–∏–∑–Ω—å', '–¥–æ–±—Ä–æ–≤–æ–ª—å–Ω–æ–µ', '–º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–µ', '—Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ', '–¥–º—Å', '–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ',
              '–º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–µ', '—Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ', '–æ–º—Å', '–º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ', '–ø—Ä–æ–≥—Ä–∞–º–º—ã', '—Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ', '–º–∏–≥—Ä–∞–Ω—Ç–æ–≤', '–∂–∏–∑–Ω—å',
              '–∏', '–Ω–µ—Å—á–∞—Å—Ç–Ω—ã–π', '—Å–ª—É—á–∞–π', '—Ç—Ä–∞–≤–º—ã', '—É—à–∏–±—ã', '–æ–∂–æ–≥–∏', '–ø–æ—Ç–µ—Ä—è', '—Ç—Ä—É–¥–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏', '–Ω–∞', '—Å–ª—É—á–∞–π',
              '–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö', '–∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π', '–¥–º—Å', '–ø—Ä–∏', '–¥—Ç–ø', '–∞–≤—Ç–æ–º–µ–¥', '–¥–æ–±—Ä–æ–≤–æ–ª—å–Ω–æ–µ', '–º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–µ',
              '—Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ',
              '–ø—Ä–∏', '–¥—Ç–ø', '–∞–≤—Ç–æ–º–µ–¥', '—Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ', '–æ—Ç', '—É–∫—É—Å–∞', '–∫–ª–µ—â–∞', '–∞–Ω—Ç–∏–∫–ª–µ—â', '—É–∫—É—Å', '–∏–∫—Å–æ–¥–æ–≤–æ–≥–æ',
              '–∫–ª–µ—â–∞'],
             'life', 0),

            (['–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏', '–∏', '–ø–µ–Ω—Å–∏—è', '–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–æ–µ', '—Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ', '–∂–∏–∑–Ω–∏', '–Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–µ', '–ø—Ä–æ–≥—Ä–∞–º–º—ã',
              '–ø–µ–Ω—Å–∏–æ–Ω–Ω—ã–µ', '–Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è', '–ø–∞–µ–≤—ã–µ', '—Ñ–æ–Ω–¥—ã', '–ø–∏—Ñ—ã', '–¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ', '—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', '–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π',
              '–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π'], 'investments')

        ]

        @self.bot.callback_query_handler(func=lambda call: True)
        def callback_inline(call):
            logging.info('Callback')
            self.on_callback(call)

        @self.bot.message_handler(commands=["stop"])
        def stop(message):
            if self.check_user(message):
                return
            logging.info('Command /stop')
            self.on_stop(message)

        @self.bot.message_handler(commands=["start"])
        def start(message):
            if self.check_user(message):
                return
            logging.info('Command /start')
            self.on_start(message)

        @self.bot.message_handler(content_types=["sticker"])
        def stickers(message):
            if self.check_user(message): return
            logging.info('Sticker')
            self.on_sticker(message)

        @self.bot.message_handler(content_types=["photo"])
        def photos(message):
            if self.check_user(message): return
            self.on_photo(message)

        @self.bot.message_handler(content_types=["audio"])
        def audios(message):
            if self.check_user(message): return
            logging.info('Audio')
            self.on_audio(message)

        @self.bot.message_handler(content_types=["video"])
        def videos(message):
            if self.check_user(message): return
            logging.info('Video')
            self.on_video(message)

        @self.bot.message_handler(content_types=["voice"])
        def voices(message):
            if self.check_user(message): return
            logging.info('Voice')
            self.on_voice(message)

        @self.bot.message_handler(content_types=["document"])
        def documents(message):
            if self.check_user(message): return
            logging.info('Document')
            self.on_document(message)

        @self.bot.message_handler(content_types=["contact"])
        def contacts(message):
            if self.check_user(message): return
            logging.info('Contact')
            self.on_contact(message)

        @self.bot.message_handler(content_types=["location"])
        def locations(message):
            if self.check_user(message): return
            logging.info('Location')
            self.on_location(message)

        @self.bot.message_handler(commands=["ping"])
        def on_ping(message):
            if self.check_user(message): return
            logging.info('Command')
            self.on_ping(message)

        @self.bot.message_handler(content_types=['text'])
        def echo_message(message):
            if self.check_user(message): return
            logging.info('Message')

            if message.text[0] == '/':
                self.on_unknown_command(message)

            else:
                self.NewMessage(message)

    def on_unknown_command(self, message):
        self.send_message_thread(message.chat.id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")

    def on_callback(self, call):
        if call.message:
            pass
        elif call.inline_message_id:
            pass

    def on_stop(self, message):
        self.send_message_thread(message.chat.id, "–í—ã –Ω–∞–∂–∞–ª–∏ /stop")

    def on_start(self, message):
        self.ch_page(message.chat.id, 'start')
        self.send_message_thread(message.chat.id, "–ß—Ç–æ –≤—ã —Ö–æ—Ç–µ–ª–∏ —É–∑–Ω–∞—Ç—å?", reply_markup=self.markups(None))

    def on_sticker(self, message):
        logging.info('Sticker file id - %s' % message.sticker.file_id)
        self.send_message_thread(message.chat.id, "–í—ã –ø—Ä–∏—Å–ª–∞–ª–∏ —Å—Ç–∏–∫–µ—Ä.")

    def on_photo(self, message):
        self.send_message_thread(message.chat.id, "–í—ã –ø—Ä–∏—Å–ª–∞–ª–∏ —Ñ–æ—Ç–æ.")

    def on_document(self, message):
        self.send_message_thread(message.chat.id, "–í—ã –ø—Ä–∏—Å–ª–∞–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç.")

    def on_voice(self, message):
        self.send_message_thread(message.chat.id, "–í—ã –ø—Ä–∏—Å–ª–∞–ª–∏ –≥–æ–ª–æ—Å.")

    def on_video(self, message):
        self.send_message_thread(message.chat.id, "–í—ã –ø—Ä–∏—Å–ª–∞–ª–∏ –≤–∏–¥–µ–æ.")

    def on_audio(self, message):
        self.send_message_thread(message.chat.id, "–í—ã –ø—Ä–∏—Å–ª–∞–ª–∏ –∞—É–¥–∏–æ.")

    def on_contact(self, message):
        self.send_message_thread(message.chat.id, "–í—ã –ø—Ä–∏—Å–ª–∞–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç.")

    def on_location(self, message):
        self.send_message_thread(message.chat.id, "–í—ã –ø—Ä–∏—Å–ª–∞–ª–∏ –ª–æ–∫–∞—Ü–∏—é.")

    def on_ping(self, message):
        self.send_message_thread(message.chat.id, random.choice(self.f.strings['ping']))

    def on_like(self, message):
        self.bot.send_message(message.chat.id, '–ë–ª–∞–≥–æ–¥–∞—Ä—é! üòä\n–ú–Ω–µ –æ—á–µ–Ω—å –ø—Ä–∏—è—Ç–Ω–æ!')
        self.bot.send_sticker(message.chat.id, random.choice(self.f.strings['stickers_like']))

    def ch_page(self, user_id, page):
        self.users[str(user_id)]['page'] = page

    def get_theme(self, text):
        th = self.additional_themes[:]

        rss = [chr(i) for i in range(1039, 1104)] + [' ']
        r = ''.join([i for i in text.lower() if i in rss])
        r = r.split()

        yet = [0 for _ in range(th.__len__())]

        for i in range(th.__len__()):
            x = ' '.join(th[i][0])
            for word in r:
                u = word
                if len(u) > 5:
                    u = u[:-1]
                if u in x:
                    yet[i] += len(u)/1

        inx = yet.index(max(yet))
        theme = th[inx][1]

        if max(yet) < 2:
            return (False, theme)

        else:
            return (True, theme)

    def add_word(self, word, theme):
        return

    def NewMessage(self, message):
        if ord(message.text[0]) == 128077:
            self.on_like(message)
            return

        id = message.chat.id
        text = message.text
        page = self.get_user(id)["page"]

        if page == 'start':
            status, theme = self.get_theme(text)

            if status:
                theme = self.themes[theme]

                if theme == "–ê–≤—Ç–æ—Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ":
                    self.ch_page(id, 'car')
                    markup = self.markups("–í–µ—Ä–Ω—É—Ç—å—Å—è")
                    self.send_message_thread(message.chat.id, theme, reply_markup=markup)

                elif theme == "–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è":
                    self.ch_page(id, 'travel')
                    markup = self.markups("–í–µ—Ä–Ω—É—Ç—å—Å—è")
                    self.send_message_thread(message.chat.id, theme, reply_markup=markup)

                elif theme == "–ò–º—É—â–µ—Å—Ç–≤–æ":
                    self.ch_page(id, 'property')
                    markup = self.markups("–í–µ—Ä–Ω—É—Ç—å—Å—è")
                    self.send_message_thread(message.chat.id, theme, reply_markup=markup)

                elif theme == "–ó–¥–æ—Ä–æ–≤—å–µ –∏ –∂–∏–∑–Ω—å":
                    self.ch_page(id, 'life')
                    markup = self.markups("–í–µ—Ä–Ω—É—Ç—å—Å—è")
                    self.send_message_thread(message.chat.id, theme, reply_markup=markup)

                elif theme == "–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –∏ –ø–µ–Ω—Å–∏—è":
                    self.ch_page(id, 'investments')
                    markup = self.markups("–í–µ—Ä–Ω—É—Ç—å—Å—è")
                    self.send_message_thread(message.chat.id, theme, reply_markup=markup)

                elif theme == "üîô":
                    self.ch_page(id, 'menu')
                    markup = self.markups("–í–µ—Ä–Ω—É—Ç—å—Å—è")
                    self.send_message_thread(message.chat.id, theme, reply_markup=markup)

            else:
                self.ch_page(message.chat.id, 'menu')
                markup = self.markup_menu
                self.send_message_thread(message.chat.id,
                                         '–Ø –Ω–µ —Å–æ–≤—Å–µ–º —Ç–æ—á–Ω–æ –≤–∞—Å –ø–æ–Ω—è–ª üòÑ\n\n–ü—Ä–µ–¥–ª–∞–≥–∞—é –≤–∞–º –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø–æ–∏—Å–∫–æ–º:',
                                         reply_markup=markup)

        elif page == 'menu':
            if text == 'üóÑ –í–∏–¥—ã —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏—è':
                self.ch_page(id, 'themes')
                markup = self.markups("–í–µ—Ä–Ω—É—Ç—å—Å—è")
                self.send_message_thread(message.chat.id, text, reply_markup=markup)

            elif text == 'üè™ –û—Ñ–∏—Å—ã':
                self.ch_page(id, 'offices')
                markup = self.markups("–í–µ—Ä–Ω—É—Ç—å—Å—è")
                self.send_message_thread(message.chat.id, text, reply_markup=markup)

            elif text == '–°–µ—Ä–≤–∏—Å—ã –∏ –ø–ª–∞—Ç–µ–∂–∏':
                self.ch_page(id, 'services')
                markup = self.markups("–í–µ—Ä–Ω—É—Ç—å—Å—è")
                self.send_message_thread(message.chat.id, text, reply_markup=markup)

            elif text == '–û –∫–æ–º–ø–∞–Ω–∏–∏':
                markup = self.markup_menu
                self.send_message_thread(message.chat.id, '*–°–ü–ê–û* ¬´[–ò–Ω–≥–æ—Å—Å—Ç—Ä–∞—Ö](https://www.ingos.ru)¬ª ‚Äî _–æ–¥–Ω–∞ –∏–∑ –∫—Ä—É–ø–Ω–µ–π—à–∏—Ö —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö —Å—Ç—Ä–∞—Ö–æ–≤—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π, —Å—Ç–∞–±–∏–ª—å–Ω–æ –≤—Ö–æ–¥–∏—Ç –≤ –¢–æ–ø 10 —Å—Ç—Ä–∞—Ö–æ–≤—â–∏–∫–æ–≤ –†–§._\n\n–û—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–∏—Å—Ç–µ–º–æ–æ–±—Ä–∞–∑—É—é—â–∏—Ö —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö —Å—Ç—Ä–∞—Ö–æ–≤—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π.\n\n–ù–∞–∏–±–æ–ª–µ–µ –º–µ–¥–∏–∞-–∞–∫—Ç–∏–≤–Ω—ã–π —Å—Ç—Ä–∞—Ö–æ–≤—â–∏–∫, —Ç—Ä–∏ –≥–æ–¥–∞ –ø–æ–¥—Ä—è–¥ –∑–∞–Ω–∏–º–∞–µ—Ç –ø–µ—Ä–≤–æ–µ –º–µ—Å—Ç–æ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ –Ω–∞–∏–±–æ–ª–µ–µ —É–ø–æ–º–∏–Ω–∞–µ–º—ã—Ö –≤ –ø—Ä–µ—Å—Å–µ —Å—Ç—Ä–∞—Ö–æ–≤—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π.', reply_markup=markup, parse_mode='Markdown', disable_web_page_preview=True)

            else:
                markup = self.markup_menu
                self.bot.send_message(message.chat.id, '–Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Ç–µ–±–µ –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é üòä\n–ó–∞–¥–∞–π –º–Ω–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é üëá', reply_markup=markup)

        elif page == "themes":
            if text == "–ê–≤—Ç–æ—Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ":
                self.ch_page(id, 'car')
                markup = self.markups("–í–µ—Ä–Ω—É—Ç—å—Å—è")
                self.send_message_thread(message.chat.id, text, reply_markup=markup)

            elif text == "–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è":
                self.ch_page(id, 'travel')
                markup = self.markups("–í–µ—Ä–Ω—É—Ç—å—Å—è")
                self.send_message_thread(message.chat.id, text, reply_markup=markup)

            elif text == "–ò–º—É—â–µ—Å—Ç–≤–æ":
                self.ch_page(id, 'property')
                markup = self.markups("–í–µ—Ä–Ω—É—Ç—å—Å—è")
                self.send_message_thread(message.chat.id, text, reply_markup=markup)

            elif text == "–ó–¥–æ—Ä–æ–≤—å–µ –∏ –∂–∏–∑–Ω—å":
                self.ch_page(id, 'life')
                markup = self.markups("–í–µ—Ä–Ω—É—Ç—å—Å—è")
                self.send_message_thread(message.chat.id, text, reply_markup=markup)

            elif text == "–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –∏ –ø–µ–Ω—Å–∏—è":
                self.ch_page(id, 'investments')
                markup = self.markups("–í–µ—Ä–Ω—É—Ç—å—Å—è")
                self.send_message_thread(message.chat.id, text, reply_markup=markup)

            else:
                status, theme = self.get_theme(text)
                if status:
                    theme = self.themes[theme]

                    if theme == "–ê–≤—Ç–æ—Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ":
                        self.ch_page(id, 'car')
                        markup = self.markups("–í–µ—Ä–Ω—É—Ç—å—Å—è")
                        self.send_message_thread(message.chat.id, theme, reply_markup=markup)

                    elif theme == "–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è":
                        self.ch_page(id, 'travel')
                        markup = self.markups("–í–µ—Ä–Ω—É—Ç—å—Å—è")
                        self.send_message_thread(message.chat.id, theme, reply_markup=markup)

                    elif theme == "–ò–º—É—â–µ—Å—Ç–≤–æ":
                        self.ch_page(id, 'property')
                        markup = self.markups("–í–µ—Ä–Ω—É—Ç—å—Å—è")
                        self.send_message_thread(message.chat.id, theme, reply_markup=markup)

                    elif theme == "–ó–¥–æ—Ä–æ–≤—å–µ –∏ –∂–∏–∑–Ω—å":
                        self.ch_page(id, 'life')
                        markup = self.markups("–í–µ—Ä–Ω—É—Ç—å—Å—è")
                        self.send_message_thread(message.chat.id, theme, reply_markup=markup)

                    elif theme == "–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –∏ –ø–µ–Ω—Å–∏—è":
                        self.ch_page(id, 'investments')
                        markup = self.markups("–í–µ—Ä–Ω—É—Ç—å—Å—è")
                        self.send_message_thread(message.chat.id, theme, reply_markup=markup)
                else:
                    markup = self.markup_themes
                    self.send_message_thread(message.chat.id, '–Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Ç–µ–±–µ –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é üòä\n–ó–∞–¥–∞–π –º–Ω–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é üëá', reply_markup=markup)

        elif page == "car":
            if text == "–í–µ—Ä–Ω—É—Ç—å—Å—è":
                self.ch_page(id, "themes")
                markup = self.markup_themes
                self.send_message_thread(message.chat.id, '–Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Ç–µ–±–µ –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é üòä\n–ó–∞–¥–∞–π –º–Ω–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é üëá', reply_markup=markup)

            else:
                markup = self.markups("–í–µ—Ä–Ω—É—Ç—å—Å—è")
                self.send_message_thread(message.chat.id, "–í—ã –≤ –∫–æ–º–Ω–∞—Ç–µ 1", reply_markup=markup)

        elif page == "travel":
            if text == "–í–µ—Ä–Ω—É—Ç—å—Å—è":
                self.ch_page(id, "themes")
                markup = self.markup_themes
                self.send_message_thread(message.chat.id, '–Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Ç–µ–±–µ –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é üòä\n–ó–∞–¥–∞–π –º–Ω–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é üëá', reply_markup=markup)

            else:
                markup = self.markups("–í–µ—Ä–Ω—É—Ç—å—Å—è")
                self.send_message_thread(message.chat.id, page, reply_markup=markup)

        elif page == 'property':
            if text == "–í–µ—Ä–Ω—É—Ç—å—Å—è":
                self.ch_page(id, "themes")
                markup = self.markup_themes
                self.send_message_thread(message.chat.id, '–Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Ç–µ–±–µ –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é üòä\n–ó–∞–¥–∞–π –º–Ω–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é üëá', reply_markup=markup)

            else:
                markup = self.markups("–í–µ—Ä–Ω—É—Ç—å—Å—è")
                self.send_message_thread(message.chat.id, page, reply_markup=markup)

        elif page == 'life':
            if text == "–í–µ—Ä–Ω—É—Ç—å—Å—è":
                self.ch_page(id, "themes")
                markup = self.markup_themes
                self.send_message_thread(message.chat.id, '–Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Ç–µ–±–µ –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é üòä\n–ó–∞–¥–∞–π –º–Ω–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é üëá', reply_markup=markup)

            else:
                markup = self.markups("–í–µ—Ä–Ω—É—Ç—å—Å—è")
                self.send_message_thread(message.chat.id, page, reply_markup=markup)

        elif page == 'investments':
            if text == "–í–µ—Ä–Ω—É—Ç—å—Å—è":
                self.ch_page(id, "themes")
                markup = self.markup_themes
                self.send_message_thread(message.chat.id, '–Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Ç–µ–±–µ –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é üòä\n–ó–∞–¥–∞–π –º–Ω–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é üëá', reply_markup=markup)

            else:
                markup = self.markups("–í–µ—Ä–Ω—É—Ç—å—Å—è")
                self.send_message_thread(message.chat.id, page, reply_markup=markup)

        else:
            self.ch_page(id, "themes")
            markup = self.markup_themes
            self.send_message_thread(message.chat.id, "–û—à–∏–±–∫–∞.", reply_markup=markup)

    def get_user(self, user_id):
        return self.users[str(user_id)]

    def check_user(self, message):
        # Check User in Dictionary Users
        if message.chat.id < 0:
            return True

        if str(message.chat.id) in self.users:
            self.get_user(message.chat.id)['time'] = int(time.time())
            if self.get_user(message.chat.id)["chat"]:
                threading.Thread(target=self.f.update_users, args=[self.users]).start()
                return False
            else:
                threading.Thread(target=self.f.update_users, args=[self.users]).start()
                return True

        else:
            self.clear()
            logging.warning('New User')

            self.users[str(message.chat.id)] = {
                "name": message.from_user.first_name,
                "sname": message.from_user.last_name,
                "username": message.from_user.username,
                "page": "start",
                "chat": True,
                "start": int(time.time()),
                "time": int(time.time())

            }

            threading.Thread(target=self.f.update_users, args=[self.users]).start()
            return False

    def send_message_thread(
            self,
            chat_id,
            text,
            disable_web_page_preview=None,
            reply_to_message_id=None,
            reply_markup=None,
            parse_mode=None,
            disable_notification=None
    ):
        threading.Thread(target=self.bot.send_message, args=[
            chat_id,
            text,
            disable_web_page_preview,
            reply_to_message_id,
            reply_markup,
            parse_mode,
            disable_notification
        ]).start()

    def markups(self, *args):
        markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
        if len(args):
            for i in args:
                if i is None:
                    return telebot.types.ReplyKeyboardRemove()

                if type(i) in (str, int):
                    markup.row(str(i))
                else:
                    markup.row(*i)

        else:
            return telebot.types.ReplyKeyboardRemove()
        return markup

    def listener(self, message):
        pass

    def clear(self):
        if os.name == 'nt':
            os.system('cls')
        else:
            os.system('clear')

        print(self.f.config['name'], self.f.config['version'])

    def run(self):
        logging.info('New Proccess Bot')

        try:
            # self.bot.set_update_listener(self.listener)
            self.bot.polling(True)

        except telebot.apihelper.ApiException:
            threading.Thread(target=self.run).start()


class FilesExchange:
    def __init__(self, debug=False):
        self.busy = False
        self.boot(debug)

    def boot(self, debug=False):
        if self.busy:
            return

        self.busy = True

        files = {'config', 'users', 'strings'}

        opens = {}

        for file in files:
            filename = '%s.json' % file
            if not os.access(filename, mode=os.F_OK):
                if debug: logging.info('Not Found File as "%s"' % filename)
                with open(file=filename, mode='w') as body:
                    if file == 'strings':
                        text = '{"ping": ["Of course I work!", "I\'m already work!"], "stickers_like":["CAADAgADHA4AAkKvaQABYnIuek_e3-wC", "CAADAgADpwEAAzigCiq77pQrZXN5Ag", "CAADAgAD3AADWQMDAAH0zFgaGiqNBgI", "CAADBAADTQIAAuJy2QABuawJiJx0CBoC", "CAADAgADPQMAAu7UDQABcLqwo2_UmeAC"]}'
                    elif file == 'config':
                        text = '{"token": "", "version": "0.0.1", "name": "TestDmRobot"}'
                    else:
                        text = '{}'
                    body.write(text)
            opens[file] = open(file=filename, mode='r')

        self.users = json.loads(opens['users'].read())
        self.config = json.loads(opens['config'].read())
        self.strings = json.loads(opens['strings'].read())

        opens['users'].close()
        opens['config'].close()
        opens['strings'].close()

        self.busy = False

    def update_users(self, users):
        with open(file='users.json', mode='w') as file:
            file.write(json.dumps(users))


if __name__ == '__main__':
    bot = TelegramBot()
    bot.run()
