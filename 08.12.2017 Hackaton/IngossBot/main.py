# -*- coding: utf-8 -*-

# Imports

import json
import logging
import os
import random
import sys
import threading
import time

import telebot
from naiveBayesClassifier import tokenizer
from naiveBayesClassifier.trainer import Trainer
from naiveBayesClassifier.classifier import Classifier

print(sys.executable, os.path.realpath(__file__))
# print(dir(telebot))
# print(dir(os))


logging.basicConfig(format="[%(asctime)-15s] %(levelname)s %(funcName)s: %(message)s", level=logging.INFO)


class TelegramBot:
    """ This is Bot Class

    Methods:
        send_message_thread

    """

    def __init__(self):
        self.f = FilesExchange(True)
        self.users = self.f.users
        print(self.f.config['name'], self.f.config['version'])
        self.bot = telebot.TeleBot(self.f.config['token'])


        # STRINGS
        self.texts = {
            'menu':'–Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Ç–µ–±–µ –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é üòÑ\n–ó–∞–¥–∞–π –º–Ω–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é üëá',
            'car':'–ê–≤—Ç–æ—Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ\n\n\/',
            'travel':'–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è\n\n\/',
            'property':'–ò–º—É—â–µ—Å—Ç–≤–æ\n\n\/',
            'life':'–ó–¥–æ—Ä–æ–≤—å–µ –∏ –∂–∏–∑–Ω—å\n\n\/',
            'investments':'–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –∏ –ø–µ–Ω—Å–∏—è\n\n\/'
        }


        # DICTS
        self.themes = {
            '1':'–ê–≤—Ç–æ—Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ',
            '2':'–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è',
            '3':'–ò–º—É—â–µ—Å—Ç–≤–æ',
            '4':'–ó–¥–æ—Ä–æ–≤—å–µ',
            '5':'–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏',
            '6':'–û—Ñ–∏—Å—ã',
            '7':'–°–µ—Ä–≤–∏—Å—ã',
            '8':'–û–ø–µ—Ä–∞—Ç–æ—Ä',
            '9':'–ü–µ—Ä–µ—Å–ø—Ä–æ—Å–∏—Ç—å',
            '10':'–ú—É—Å–æ—Ä'
        }

        self.themes_add = {
            '–ê–≤—Ç–æ—Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ': 'car',
            '–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è': 'travel',
            '–ò–º—É—â–µ—Å—Ç–≤–æ': 'property',
            '–ó–¥–æ—Ä–æ–≤—å–µ': 'life',
            '–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏':'investments',
            '–û—Ñ–∏—Å—ã':'offices',
            '–°–µ—Ä–≤–∏—Å—ã':'services',
            '–û–ø–µ—Ä–∞—Ç–æ—Ä': 'operator',
            '–ü–µ—Ä–µ—Å–ø—Ä–æ—Å–∏—Ç—å':'ask',
            '–ú—É—Å–æ—Ä':'delete'
        }

        self.themes_rev = {
            'car':'–ê–≤—Ç–æ—Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ',
            'travel':'–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è',
            'property':'–ò–º—É—â–µ—Å—Ç–≤–æ',
            'life':'–ó–¥–æ—Ä–æ–≤—å–µ',
            'investments':'–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏',
            'offices':'–û—Ñ–∏—Å—ã',
            'services':'–°–µ—Ä–≤–∏—Å—ã',
            'operator':'–û–ø–µ—Ä–∞—Ç–æ—Ä',
            'ask':'–ü–µ—Ä–µ—Å–ø—Ä–æ—Å–∏—Ç—å',
            'delete':'–ú—É—Å–æ—Ä'
        }

        self.markups_themes = {
            'themes':self.markups(["–ê–≤—Ç–æ—Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ", "–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è"],["–ò–º—É—â–µ—Å—Ç–≤–æ", '–ó–¥–æ—Ä–æ–≤—å–µ –∏ –∂–∏–∑–Ω—å'],'–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –∏ –ø–µ–Ω—Å–∏—è','üîô'),
            'menu':self.markups('üóÑ –í–∏–¥—ã —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏—è','üè™ –û—Ñ–∏—Å—ã','‚öô –°–µ—Ä–≤–∏—Å—ã –∏ –ø–ª–∞—Ç–µ–∂–∏',['FAQ', ' –û –∫–æ–º–ø–∞–Ω–∏–∏']),
            'car': self.markups(['–û–°–ê–ì–û', '–ö–ê–°–ö–û'], '–ó–µ–ª–µ–Ω–∞—è –∫–∞—Ä—Ç–∞', 'üîô'),
            'travel': self.markups(['–ó–∞ –≥—Ä–∞–Ω–∏—Ü—É', '–ü–æ –†–æ—Å—Å–∏–∏'], '–û—Ç–º–µ–Ω–∞ –ø–æ–µ–∑–¥–∫–∏ (–ù–µ–≤—ã–µ–∑–¥)', 'üîô'),
            'property': self.markups(['–ö–≤–∞—Ä—Ç–∏—Ä–∞', '–ò–ø–æ—Ç–µ–∫–∞'], '–ó–∞–≥–æ—Ä–æ–¥–Ω–∞—è –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å', '–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å', 'üîô'),
            'life': self.markups('üîô'),
            'investments': self.markups('üîô'),
            'offices': self.markups('üîô'),
            'services': self.markups(['–ü—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–ª–∏—Å–∞', '–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–ª–∏—Å–∞'], ['–û–ø–ª–∞—Ç–∞', '–ü—Ä–æ–≤–µ—Ä–∫–∞'], 'üîô'),
            'operator': self.markups('üîô'),
            'ask': self.markups('üîô'),
            'delete': self.markups('üîô'),
        }

        @self.bot.callback_query_handler(func=lambda call: True)
        def callback_inline(call):
            logging.info('Callback')
            self.on_callback(call)

        @self.bot.message_handler(commands=["stop"])
        def stop(message):
            if self.check_user(message):
                return
            logging.info('Command /stop')
            self.on_stop(message)

        @self.bot.message_handler(commands=["start"])
        def start(message):
            if self.check_user(message):
                return
            logging.info('Command /start')
            self.on_start(message)

        @self.bot.message_handler(content_types=["sticker"])
        def stickers(message):
            if self.check_user(message): return
            logging.info('Sticker')
            self.on_sticker(message)

        @self.bot.message_handler(content_types=["photo"])
        def photos(message):
            if self.check_user(message): return
            self.on_photo(message)

        @self.bot.message_handler(content_types=["audio"])
        def audios(message):
            if self.check_user(message): return
            logging.info('Audio')
            self.on_audio(message)

        @self.bot.message_handler(content_types=["video"])
        def videos(message):
            if self.check_user(message): return
            logging.info('Video')
            self.on_video(message)

        @self.bot.message_handler(content_types=["voice"])
        def voices(message):
            if self.check_user(message): return
            logging.info('Voice')
            self.on_voice(message)

        @self.bot.message_handler(content_types=["document"])
        def documents(message):
            if self.check_user(message): return
            logging.info('Document')
            self.on_document(message)

        @self.bot.message_handler(content_types=["contact"])
        def contacts(message):
            if self.check_user(message): return
            logging.info('Contact')
            self.on_contact(message)

        @self.bot.message_handler(content_types=["location"])
        def locations(message):
            if self.check_user(message): return
            logging.info('Location')
            self.on_location(message)

        @self.bot.message_handler(commands=["ping"])
        def on_ping(message):
            if self.check_user(message): return
            logging.info('Command')
            self.on_ping(message)

        @self.bot.message_handler(content_types=['text'])
        def echo_message(message):
            if self.check_user(message): return
            logging.info('Message')

            if message.text[0] == '/':
                self.on_unknown_command(message)

            else:
                self.NewMessage(message)

    def on_unknown_command(self, message):
        self.bot.send_message(message.chat.id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")

    def on_callback(self, call):
        if call.message:
            d = call.data.split(':')
            self.bot.answer_callback_query(call.id, '')
            if d[0] == 'long_polic':
                if d[1] == 'yes':
                    keyboard = telebot.types.InlineKeyboardMarkup()
                    keyboard.add(telebot.types.InlineKeyboardButton('–ü—Ä–æ–¥–ª–∏—Ç—å –≤ —Ä–µ–∂–∏–º–µ –æ–Ω–ª–∞–π–Ω', url='https://ingos.ru/services/prolongation/'))
                    self.bot.edit_message_text('*–ü—Ä–æ–¥–ª–∏—Ç—å ‚Äì –ö–ê–°–ö–û/—Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ –∫–≤–∞—Ä—Ç–∏—Ä*\n\n–î–ª—è —ç—Ç–æ–≥–æ –Ω—É–∂–Ω–æ:\n\n¬∑ –ù–æ–º–µ—Ä —Å—Ç—Ä–∞—Ö–æ–≤–æ–≥–æ –ø–æ–ª–∏—Å–∞\n¬∑ –§–∞–º–∏–ª–∏—é —Ç–æ–≥–æ, –∫—Ç–æ –∑–∞–∫–ª—é—á–∞–ª –¥–æ–≥–æ–≤–æ—Ä (—Å—Ç—Ä–∞—Ö–æ–≤–∞—Ç–µ–ª—è)\n¬∑ –£–∑–Ω–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–¥–ª–µ–Ω–∏—è –º–æ–∂–Ω–æ –∑–∞ 20 –¥–Ω–µ–π –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª–∏—Å–∞', call.from_user.id, call.message.message_id, reply_markup=keyboard, parse_mode='Markdown')

                else:
                    self.bot.edit_message_text('–°–ø–∞—Å–∏–±–æ, —è —É—á—Ç—É —ç—Ç–æ!', call.from_user.id, call.message.message_id)

            elif d[0] == 'pay':
                if d[1] == 'yes':
                    keyboard = telebot.types.InlineKeyboardMarkup()
                    keyboard.add(telebot.types.InlineKeyboardButton('–û–ø–ª–∞—Ç–∏—Ç—å —Å—á–µ—Ç–∞ –∏–ª–∏ –ø–ª–∞—Ç–µ–∂–∏',
                                                                    url='https://ingos.ru/services/pay/'))
                    self.bot.edit_message_text(
                        '*–û–Ω–ª–∞–π–Ω –æ–ø–ª–∞—Ç–∞ –æ—á–µ—Ä–µ–¥–Ω—ã—Ö –≤–∑–Ω–æ—Å–æ–≤ –∏ —Å—á–µ—Ç–æ–≤ —É–¥–æ–±–Ω—ã–º –¥–ª—è –í–∞—Å —Å–ø–æ—Å–æ–±–æ–º.*\n\n–î–ª—è —ç—Ç–æ–≥–æ –Ω—É–∂–Ω–æ:\n\n¬∑ –ù–æ–º–µ—Ä —Å—á–µ—Ç–∞ –∏–ª–∏ –¥–æ–≥–æ–≤–æ—Ä–∞\n¬∑ –§–∞–º–∏–ª–∏—é —Å—Ç—Ä–∞—Ö–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–ª–∞—Ç–µ–ª—å—â–∏–∫–∞ –ø–æ —Å—á–µ—Ç—É\n¬∑ –û–ø–ª–∞—Ç–∏—Ç—å –≤–∑–Ω–æ—Å –∏–ª–∏ —Å—á–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ –¥–æ –¥–∞—Ç—ã, —É–∫–∞–∑–∞–Ω–Ω–æ–π –≤ —Å—á–µ—Ç–µ –∏–ª–∏ –≤ –ø–ª–∞–Ω–æ–≤–æ–π —Ä–∞—Å—Å—Ä–æ—á–∫–µ –ø–ª–∞—Ç–µ–∂–∞\n¬∑ –ï—Å–ª–∏ —Å—Ä–æ–∫ –ø–ª–∞—Ç–µ–∂–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω - –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ò–Ω–≥–æ—Å—Å—Ç—Ä–∞—Ö –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏',
                        call.from_user.id, call.message.message_id, reply_markup=keyboard, parse_mode='Markdown')

                else:
                    self.bot.edit_message_text('–°–ø–∞—Å–∏–±–æ, —è —É—á—Ç—É —ç—Ç–æ!', call.from_user.id, call.message.message_id)

            elif d[0] == 'activate_polic':
                if d[1] == 'yes':
                    keyboard = telebot.types.InlineKeyboardMarkup()
                    keyboard.add(telebot.types.InlineKeyboardButton('–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –≤ —Ä–µ–∂–∏–º–µ –æ–Ω–ª–∞–π–Ω',
                                                                    url='https://ingos.ru/services/activate/'))
                    self.bot.edit_message_text(
                        '*–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª–∏—Å–∞*\n\n–î–ª—è —ç—Ç–æ–≥–æ –Ω—É–∂–Ω–æ:\n\n¬∑ –ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ö–æ–≤–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞\n¬∑ –ù–æ–º–µ—Ä –ø–æ–ª–∏—Å–∞\n¬∑ –ö–æ–¥ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏\n¬∑ –°—Ä–æ–∫–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–ª–∏—Å–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –Ω–∞ –∫–æ—Ä–æ–±–∫–µ, –≤ –∫–æ—Ç–æ—Ä–æ–π –æ–Ω –Ω–∞—Ö–æ–¥–∏—Ç—Å—è',
                        call.from_user.id, call.message.message_id, reply_markup=keyboard, parse_mode='Markdown')

                else:
                    self.bot.edit_message_text('–°–ø–∞—Å–∏–±–æ, —è —É—á—Ç—É —ç—Ç–æ!', call.from_user.id, call.message.message_id)

            elif d[0] == 'check':
                if d[1] == 'yes':
                    keyboard = telebot.types.InlineKeyboardMarkup()
                    keyboard.add(telebot.types.InlineKeyboardButton(
                        '–û–ø–ª–∞—Ç–∏—Ç—å —Å—á–µ—Ç–∞ –∏–ª–∏ –ø–ª–∞—Ç–µ–∂–∏',
                        url='https://ingos.ru/services/check_policy/')
                    )
                    self.bot.edit_message_text(
                        '*–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç—å –∏ —Å—Ç–∞—Ç—É—Å —Å—Ç—Ä–∞—Ö–æ–≤–æ–≥–æ –ø–æ–ª–∏—Å–∞ –ø–æ –±–∞–∑–µ –°–ü–ê–û ¬´–ò–Ω–≥–æ—Å—Å—Ç—Ä–∞—Ö¬ª.*\n\n–î–ª—è —ç—Ç–æ–≥–æ –Ω—É–∂–Ω–æ:\n\n¬∑ –ù–æ–º–µ—Ä —Å—á–µ—Ç–∞ –∏–ª–∏ –¥–æ–≥–æ–≤–æ—Ä–∞\n\n¬∑ –§–∞–º–∏–ª–∏—é —Å—Ç—Ä–∞—Ö–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–ª–∞—Ç–µ–ª—å—â–∏–∫–∞ –ø–æ —Å—á–µ—Ç—É\n\n¬∑ –û–ø–ª–∞—Ç–∏—Ç—å –≤–∑–Ω–æ—Å –∏–ª–∏ —Å—á–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ –¥–æ –¥–∞—Ç—ã, —É–∫–∞–∑–∞–Ω–Ω–æ–π –≤ —Å—á–µ—Ç–µ –∏–ª–∏ –≤ –ø–ª–∞–Ω–æ–≤–æ–π —Ä–∞—Å—Å—Ä–æ—á–∫–µ –ø–ª–∞—Ç–µ–∂–∞\n\n¬∑ –ï—Å–ª–∏ —Å—Ä–æ–∫ –ø–ª–∞—Ç–µ–∂–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω - –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ò–Ω–≥–æ—Å—Å—Ç—Ä–∞—Ö –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏',
                        call.from_user.id, call.message.message_id, reply_markup=keyboard, parse_mode='Markdown')

                else:
                    self.bot.edit_message_text('–°–ø–∞—Å–∏–±–æ, —è —É—á—Ç—É —ç—Ç–æ!', call.from_user.id, call.message.message_id)

            elif d[0] == 'theme':
                theme = d[1]

                if d[2] == 'yes':
                    self.obuchenie({
                        'car':'1',
                        'travel':'2',
                        'property':'3',
                        'life':'4',
                        'investments':'5',
                        'offices':'6',
                        'services':'7',
                        'operator':'8',
                        'ask':'9',
                        'delete':'10'
                    }[theme], self.users[str(call.from_user.id)]['text_to_save'])
                    self.ch_page(call.from_user.id, theme)
                    self.bot.delete_message(call.from_user.id, call.message.message_id)
                    self.bot.send_message(call.from_user.id, self.themes_rev[theme], reply_markup=self.markups_themes[theme])

                else:
                    self.bot.edit_message_text('–°–ø–∞—Å–∏–±–æ!\n\n–Ø —É—á—Ç—É –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ!', call.from_user.id, call.message.message_id)

        elif call.inline_message_id:
            pass

    def on_stop(self, message):
        self.bot.send_message(message.chat.id, "–í—ã –Ω–∞–∂–∞–ª–∏ /stop")

    def on_start(self, message):
        self.ch_page(message.chat.id, 'start')
        self.bot.send_message(message.chat.id, "–ß—Ç–æ –≤—ã —Ö–æ—Ç–µ–ª–∏ —É–∑–Ω–∞—Ç—å?", reply_markup=self.markups(None))

    def on_sticker(self, message):
        logging.info('Sticker file id - %s' % message.sticker.file_id)
        self.bot.send_message(message.chat.id, "–í—ã –ø—Ä–∏—Å–ª–∞–ª–∏ —Å—Ç–∏–∫–µ—Ä.")

    def on_photo(self, message):
        self.bot.send_message(message.chat.id, "–í—ã –ø—Ä–∏—Å–ª–∞–ª–∏ —Ñ–æ—Ç–æ.")

    def on_document(self, message):
        self.bot.send_message(message.chat.id, "–í—ã –ø—Ä–∏—Å–ª–∞–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç.")

    def on_voice(self, message):
        self.bot.send_message(message.chat.id, "–í—ã –ø—Ä–∏—Å–ª–∞–ª–∏ –≥–æ–ª–æ—Å.")

    def on_video(self, message):
        self.bot.send_message(message.chat.id, "–í—ã –ø—Ä–∏—Å–ª–∞–ª–∏ –≤–∏–¥–µ–æ.")

    def on_audio(self, message):
        self.bot.send_message(message.chat.id, "–í—ã –ø—Ä–∏—Å–ª–∞–ª–∏ –∞—É–¥–∏–æ.")

    def on_contact(self, message):
        self.bot.send_message(message.chat.id, "–í—ã –ø—Ä–∏—Å–ª–∞–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç.")

    def on_location(self, message):
        self.bot.send_message(message.chat.id, "–í—ã –ø—Ä–∏—Å–ª–∞–ª–∏ –ª–æ–∫–∞—Ü–∏—é.")

    def on_ping(self, message):
        self.bot.send_message(message.chat.id, random.choice(self.f.strings['ping']))

    def on_like(self, message):
        self.bot.send_message(message.chat.id, '–ë–ª–∞–≥–æ–¥–∞—Ä—é! üòä\n–ú–Ω–µ –æ—á–µ–Ω—å –ø—Ä–∏—è—Ç–Ω–æ!')
        self.bot.send_sticker(message.chat.id, random.choice(self.f.strings['stickers_like']))

    def ch_page(self, user_id, page):
        self.users[str(user_id)]['page'] = page

    def neyronka(self, _str):
        newsTrainer = Trainer(tokenizer)
        with open('o', 'rt', encoding='utf8') as csvfile:
            res = '['
            for i in csvfile.readlines():
                if i == '\n':
                    continue
                else:
                    theme, text = i.split('***')
                    res += '{\'text\':' + '\'' + text.strip() + '\'' + ', ' + '\'category\':' + '\'' + str(
                        theme) + '\'},\n'
            res += ']'
            newsSet = eval(res)
            for news in newsSet:
                newsTrainer.train(news['text'], news['category'])
            newsClassifier = Classifier(newsTrainer.data, tokenizer)
            unknownInstance = _str
            classification = newsClassifier.classify(unknownInstance)
            return (sorted(classification, key=(lambda x: -x[1])))

    def obuchenie(self, theme, _str):
        with open('o', 'a', encoding='utf8') as csvfile:
            csvfile.write('\n' + theme + '***' + _str)

    def get_theme(self, text):
        themes = self.themes
        res = self.neyronka(text)
        theme = themes[res[0][0]]

        print(self.themes[res[0][0]], res)

        if theme == 10 or (res[0][1] <= 1.0000000000000001e-07 and res[0][0] == '7') or res[0][1] == 0 or res[0][1] == 6.380000000000001e-07:
            return (False, theme)
        else:
            return (True, theme)

    def add_word(self, word, theme):
        return

    def NewMessage(self, message):
        if ord(message.text[0]) == 128077:
            self.on_like(message)
            return

        id = message.chat.id
        text = message.text
        page = self.get_user(id)["page"]

        if page == 'start':
            status, th = self.get_theme(text)

            if status:
                self.users[str(message.chat.id)]['text_to_save'] = text
                markup = telebot.types.InlineKeyboardMarkup()
                markup.add(
                    telebot.types.InlineKeyboardButton('‚úÖ –î–∞', callback_data='theme:%s:yes' % self.themes_add[th]),
                    telebot.types.InlineKeyboardButton('‚ùå –ù–µ—Ç', callback_data='theme:%s:no' % self.themes_add[th])
                )
                self.bot.send_message(message.chat.id, '–ü–µ—Ä–µ–π—Ç–∏ –≤ —Ä–∞–∑–¥–µ–ª %s ?' % th, reply_markup=markup)

            else:
                self.ch_page(message.chat.id, 'menu')
                markup = self.markups_themes['menu']
                self.bot.send_message(
                    message.chat.id,
                    '–Ø –Ω–µ —Å–æ–≤—Å–µ–º —Ç–æ—á–Ω–æ –≤–∞—Å –ø–æ–Ω—è–ª üòÑ\n\n–ü—Ä–µ–¥–ª–∞–≥–∞—é –≤–∞–º –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø–æ–∏—Å–∫–æ–º:',
                    reply_markup=markup
                )

        elif page == 'menu':
            if text == 'üóÑ –í–∏–¥—ã —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏—è':
                self.ch_page(id, 'themes')
                markup = self.markups_themes['themes']
                self.bot.send_message(message.chat.id, text, reply_markup=markup)

            elif text == 'üè™ –û—Ñ–∏—Å—ã':
                self.ch_page(id, 'offices')
                markup = self.markups('üîô')
                self.bot.send_message(message.chat.id, text, reply_markup=markup)

            elif text == '‚öô –°–µ—Ä–≤–∏—Å—ã –∏ –ø–ª–∞—Ç–µ–∂–∏':
                self.ch_page(id, 'services')
                markup = self.markups(['–ü—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–ª–∏—Å–∞', '–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–ª–∏—Å–∞'], ['–û–ø–ª–∞—Ç–∞', '–ü—Ä–æ–≤–µ—Ä–∫–∞'], 'üîô')
                self.bot.send_message(message.chat.id, text, reply_markup=markup)

            elif text == '–û –∫–æ–º–ø–∞–Ω–∏–∏':
                markup = telebot.types.InlineKeyboardMarkup()
                markup.add(telebot.types.InlineKeyboardButton(text='–£—á—Ä–µ–¥–∏—Ç–µ–ª—å–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏ —Å–≤–∏–¥–µ—Ç–µ–ª—å—Å—Ç–≤–∞', url='https://www.ingos.ru/company/disclosure_info/docs/'))
                self.bot.send_message(message.chat.id, '*–°–ü–ê–û* ¬´[–ò–Ω–≥–æ—Å—Å—Ç—Ä–∞—Ö](https://www.ingos.ru)¬ª ‚Äî _–æ–¥–Ω–∞ –∏–∑ –∫—Ä—É–ø–Ω–µ–π—à–∏—Ö —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö —Å—Ç—Ä–∞—Ö–æ–≤—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π, —Å—Ç–∞–±–∏–ª—å–Ω–æ –≤—Ö–æ–¥–∏—Ç –≤ –¢–æ–ø 10 —Å—Ç—Ä–∞—Ö–æ–≤—â–∏–∫–æ–≤ –†–§._\n\n–û—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–∏—Å—Ç–µ–º–æ–æ–±—Ä–∞–∑—É—é—â–∏—Ö —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö —Å—Ç—Ä–∞—Ö–æ–≤—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π.\n\n–ù–∞–∏–±–æ–ª–µ–µ –º–µ–¥–∏–∞-–∞–∫—Ç–∏–≤–Ω—ã–π —Å—Ç—Ä–∞—Ö–æ–≤—â–∏–∫, —Ç—Ä–∏ –≥–æ–¥–∞ –ø–æ–¥—Ä—è–¥ –∑–∞–Ω–∏–º–∞–µ—Ç –ø–µ—Ä–≤–æ–µ –º–µ—Å—Ç–æ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ –Ω–∞–∏–±–æ–ª–µ–µ —É–ø–æ–º–∏–Ω–∞–µ–º—ã—Ö –≤ –ø—Ä–µ—Å—Å–µ —Å—Ç—Ä–∞—Ö–æ–≤—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π.', reply_markup=markup, parse_mode='Markdown', disable_web_page_preview=True)

            elif text == 'FAQ':
                markup = telebot.types.InlineKeyboardMarkup()
                markup.add(telebot.types.InlineKeyboardButton(text='–û—Ç–∫—Ä—ã—Ç—å –Ω–∞ —Å–∞–π—Ç–µ', url='https://www.ingos.ru/faq/'))
                self.bot.send_message(message.chat.id, '*–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã*\n\n–í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ –ø—Ä–∏–≤–µ–¥–µ–Ω—ã –æ—Ç–≤–µ—Ç—ã –Ω–∞ —Å–∞–º—ã–µ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã, –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏.\n\n–ï—Å–ª–∏ –≤—ã –Ω–µ –Ω–∞—à–ª–∏ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, —Ç–æ –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –Ω–∞—à –∫–æ–Ω—Ç–∞–∫—Ç-—Ü–µ–Ω—Ç—Ä –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É +7(495)956-55-55 –∏–ª–∏ 8(800)100-77-55.', reply_markup=markup, parse_mode='Markdown', disable_web_page_preview=True)


            else:
                status, th = self.get_theme(text)

                if status:
                    self.users[str(message.chat.id)]['text_to_save'] = text
                    markup = telebot.types.InlineKeyboardMarkup()
                    markup.add(
                        telebot.types.InlineKeyboardButton('‚úÖ –î–∞', callback_data='theme:%s:yes' % self.themes_add[th]),
                        telebot.types.InlineKeyboardButton('‚ùå –ù–µ—Ç', callback_data='theme:%s:no' % self.themes_add[th])
                    )
                    self.bot.send_message(message.chat.id, '–ü–µ—Ä–µ–π—Ç–∏ –≤ —Ä–∞–∑–¥–µ–ª %s ?' % th, reply_markup=markup)
                else:
                    markup = self.markups_themes['menu']
                    self.bot.send_message(message.chat.id, self.texts[page], reply_markup=markup)

        elif page == "themes":
            if text == "–ê–≤—Ç–æ—Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ":
                self.ch_page(id, 'car')
                markup = self.markups_themes[self.themes_add[text]]
                self.bot.send_message(message.chat.id, self.themes_add[text], reply_markup=markup)

            elif text == "–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è":
                self.ch_page(id, 'travel')
                markup = self.markups_themes[self.themes_add[text]]
                self.bot.send_message(message.chat.id, self.themes_add[text], reply_markup=markup)

            elif text == "–ò–º—É—â–µ—Å—Ç–≤–æ":
                self.ch_page(id, 'property')
                markup = self.markups_themes[self.themes_add[text]]
                self.bot.send_message(message.chat.id, self.themes_add[text], reply_markup=markup)

            elif text == "–ó–¥–æ—Ä–æ–≤—å–µ –∏ –∂–∏–∑–Ω—å":
                self.ch_page(id, 'life')
                markup = self.markups_themes[self.themes_add['–ó–¥–æ—Ä–æ–≤—å–µ']]
                self.bot.send_message(message.chat.id, self.themes_add['–ó–¥–æ—Ä–æ–≤—å–µ'], reply_markup=markup)

            elif text == "–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –∏ –ø–µ–Ω—Å–∏—è":
                self.ch_page(id, 'investments')
                markup = self.markups_themes[self.themes_add['–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏']]
                self.bot.send_message(message.chat.id, self.themes_add['–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏'], reply_markup=markup)

            elif text == "üîô":
                self.ch_page(id, 'menu')
                markup = self.markups_themes['menu']
                self.bot.send_message(message.chat.id, self.texts['menu'], reply_markup=markup)

            else:
                status, th = self.get_theme(text)

                if status:
                    self.users[str(message.chat.id)]['text_to_save'] = text
                    markup = telebot.types.InlineKeyboardMarkup()
                    markup.add(
                        telebot.types.InlineKeyboardButton('‚úÖ –î–∞', callback_data='theme:%s:yes' % self.themes_add[th]),
                        telebot.types.InlineKeyboardButton('‚ùå –ù–µ—Ç', callback_data='theme:%s:no' % self.themes_add[th])
                    )
                    self.bot.send_message(message.chat.id, '–ü–µ—Ä–µ–π—Ç–∏ –≤ —Ä–∞–∑–¥–µ–ª %s ?' % th, reply_markup=markup)

                else:
                    markup = self.markups_themes['themes']
                    self.bot.send_message(message.chat.id, self.texts['menu'], reply_markup=markup)

        elif page == 'services':
            if text == 'üîô':
                self.ch_page(id, "menu")
                markup = self.markups_themes['menu']
                self.bot.send_message(message.chat.id, self.texts['menu'], reply_markup=markup)

            elif text == '–ü—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–ª–∏—Å–∞':
                markup = telebot.types.InlineKeyboardMarkup()
                markup.add(telebot.types.InlineKeyboardButton('‚úÖ –î–∞', callback_data='long_polic:yes'), telebot.types.InlineKeyboardButton('‚ùå –ù–µ—Ç', callback_data='long_polic:no'))
                self.bot.send_message(message.chat.id, '–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–ª–∏—Å –Ω–∞ —É—Å–ª–æ–≤–∏—è—Ö –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –¥–æ–≥–æ–≤–æ—Ä–∞?', reply_markup=markup)


            elif text == '–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–ª–∏—Å–∞':
                markup = telebot.types.InlineKeyboardMarkup()
                markup.add(telebot.types.InlineKeyboardButton('‚úÖ –î–∞', callback_data='activate_polic:yes'), telebot.types.InlineKeyboardButton('‚ùå –ù–µ—Ç', callback_data='activate_polic:no'))
                self.bot.send_message(message.chat.id, '–•–æ—Ç–∏—Ç–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª–∏—Å?', reply_markup=markup)


            elif text == '–û–ø–ª–∞—Ç–∞':
                markup = telebot.types.InlineKeyboardMarkup()
                markup.add(telebot.types.InlineKeyboardButton('‚úÖ –î–∞', callback_data='pay:yes'), telebot.types.InlineKeyboardButton('‚ùå –ù–µ—Ç', callback_data='pay:no'))
                self.bot.send_message(message.chat.id, '–•–æ—Ç–∏—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å –≤–∑–Ω–æ—Å –∏–ª–∏ —Å—á–µ—Ç?', reply_markup=markup)


            elif text == '–ü—Ä–æ–≤–µ—Ä–∫–∞':
                markup = telebot.types.InlineKeyboardMarkup()
                markup.add(telebot.types.InlineKeyboardButton('‚úÖ –î–∞', callback_data='check:yes'), telebot.types.InlineKeyboardButton('‚ùå –ù–µ—Ç', callback_data='check:no'))
                self.bot.send_message(message.chat.id, '–•–æ—Ç–∏—Ç–µ –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç—å –∏ —Å—Ç–∞—Ç—É—Å —Å—Ç—Ä–∞—Ö–æ–≤–æ–≥–æ –ø–æ–ª–∏—Å–∞ –ø–æ –±–∞–∑–µ –°–ü–ê–û ¬´–ò–Ω–≥–æ—Å—Å—Ç—Ä–∞—Ö¬ª?', reply_markup=markup)

            else:
                markup = self.markups(['–ü—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–ª–∏—Å–∞', '–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–ª–∏—Å–∞'], ['–û–ø–ª–∞—Ç–∞', '–ü—Ä–æ–≤–µ—Ä–∫–∞'], 'üîô')
                self.bot.send_message(message.chat.id, text, reply_markup=markup)

        elif page == 'offices':
            if text == 'üîô':
                self.ch_page(id, "menu")
                markup = self.markups_themes['menu']
                self.bot.send_message(message.chat.id, self.texts['menu'], reply_markup=markup)

            else:
                markup = self.markups('üîô')
                self.bot.send_message(message.chat.id, text, reply_markup=markup)

        elif page == "car":
            if text == 'üîô':
                self.ch_page(id, "themes")
                markup = self.markups_themes['themes']
                self.bot.send_message(message.chat.id, self.texts['menu'], reply_markup=markup)

            elif text == '–û–°–ê–ì–û':
                markup = telebot.types.InlineKeyboardMarkup()
                markup.add(telebot.types.InlineKeyboardButton('–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –û–°–ê–ì–û', url='https://www.ingos.ru/auto/osago/calc/'))
                self.bot.send_message(message.chat.id, '–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å *–ø–æ–ª–∏—Å–∞ –û–°–ê–ì–û* –æ–Ω–ª–∞–π–Ω –ø–æ –±–∞–∑–æ–≤—ã–º —Ç–∞—Ä–∏—Ñ–∞–º –±–µ–∑ —É—á–µ—Ç–∞ —Å—Ç—Ä–∞—Ö–æ–≤–æ–π –∏—Å—Ç–æ—Ä–∏–∏', reply_markup=markup, parse_mode='Markdown')

            elif text == '–ö–ê–°–ö–û':
                markup = telebot.types.InlineKeyboardMarkup()
                markup.add(telebot.types.InlineKeyboardButton('–†–∞—Å—á–µ—Ç –ö–ê–°–ö–û', url='https://www.ingos.ru/auto/kasko/calc/'))
                self.bot.send_message(message.chat.id, '–û—Ñ–æ—Ä–º–∏—Ç–µ *–ü–æ–ª–∏—Å –ö–ê–°–ö–û* –Ω–∞ —Å–∞–π—Ç–µ', reply_markup=markup, parse_mode='Markdown')

            elif text == '–ó–µ–ª–µ–Ω–∞—è –∫–∞—Ä—Ç–∞':
                markup = telebot.types.InlineKeyboardMarkup()
                markup.add(telebot.types.InlineKeyboardButton('–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –æ–Ω–ª–∞–π–Ω', url='https://www.ingos.ru/auto/greencard/'))
                self.bot.send_message(message.chat.id, '–û—Ñ–æ—Ä–º–∏—Ç–µ *–ó–µ–ª–µ–Ω—É—é –∫–∞—Ä—Ç—É* –≤ –æ—Ñ–∏—Å–∞—Ö –ò–Ω–≥–æ—Å—Å—Ç—Ä–∞—Ö', reply_markup=markup, parse_mode='Markdown')

            else:
                markup = self.markups('–û–°–ê–ì–û', '–ö–ê–°–ö–û', 'üîô')
                self.bot.send_message(message.chat.id, text, reply_markup=markup)

        elif page == "travel":
            if text == 'üîô':
                self.ch_page(id, "themes")
                markup = self.markups_themes['themes']
                self.bot.send_message(message.chat.id, self.texts['menu'], reply_markup=markup)

            elif text == '–ó–∞ –≥—Ä–∞–Ω–∏—Ü—É':
                markup = telebot.types.InlineKeyboardMarkup()
                markup.add(
                    telebot.types.InlineKeyboardButton('–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –æ–Ω–ª–∞–π–Ω', url='https://www.ingos.ru/travel/abroad/'))
                self.bot.send_message(message.chat.id, '*–°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤—É—é—â–∏—Ö* ‚Äì —ç—Ç–æ –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –ø–æ–º–æ—â—å –∑–∞—Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–Ω—ã–º, –Ω–∞—Ö–æ–¥—è—â–∏–º—Å—è –∑–∞ –≥—Ä–∞–Ω–∏—Ü–µ–π –≤ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–∏ –∏–ª–∏ –¥–µ–ª–æ–≤–æ–π –ø–æ–µ–∑–¥–∫–µ\n\n–°—Ç—Ä–∞—Ö–æ–≤–æ–π –ø–æ–ª–∏—Å –ø–æ–∫—Ä—ã–≤–∞–µ—Ç —Ä–∏—Å–∫–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —É—Ö—É–¥—à–µ–Ω–∏–µ–º –∑–¥–æ—Ä–æ–≤—å—è –∑–∞—Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–Ω–æ–≥–æ, –ø—Ä–∏ –æ–±—ã—á–Ω–æ–º –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–∏ –∏ –¥—Ä—É–≥–∏–µ',
                                      reply_markup=markup, parse_mode='Markdown')

            elif text == '–ü–æ –†–æ—Å—Å–∏–∏':
                markup = telebot.types.InlineKeyboardMarkup()
                markup.add(
                    telebot.types.InlineKeyboardButton('–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –æ–Ω–ª–∞–π–Ω', url='https://www.ingos.ru/travel/russia/'))
                self.bot.send_message(message.chat.id, '–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–µ *—Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ —Ç—É—Ä–∏—Å—Ç–æ–≤* –ø—Ä–∏ –ø–æ–µ–∑–¥–∫–∞—Ö –ø–æ –†–æ—Å—Å–∏–∏ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –≤–∞—Å –≥–∞—Ä–∞–Ω—Ç–∏–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π –ø–æ–º–æ—â–∏ –ø—Ä–∏ –≤—ã–µ–∑–¥–µ —Å –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –º–µ—Å—Ç–∞ –∂–∏—Ç–µ–ª—å—Å—Ç–≤–∞.',
                                      reply_markup=markup, parse_mode='Markdown')

            elif text == '–û—Ç–º–µ–Ω–∞ –ø–æ–µ–∑–¥–∫–∏ (–ù–µ–≤—ã–µ–∑–¥)':
                markup = telebot.types.InlineKeyboardMarkup()
                markup.add(
                    telebot.types.InlineKeyboardButton('–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –æ–Ω–ª–∞–π–Ω', url='https://www.ingos.ru/travel/neviezd/'))
                self.bot.send_message(message.chat.id, '*–°—Ç—Ä–∞—Ö–æ–≤–∫–∞ –æ—Ç –Ω–µ–≤—ã–µ–∑–¥–∞* - –ø–æ–ª–∏—Å —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏—è –æ—Ç –æ—Ç–º–µ–Ω—ã –ø–æ–µ–∑–¥–∫–∏.\n\n–î–∞–Ω–Ω—ã–π –ø–æ–ª–∏—Å –∑–∞—â–∏—â–∞–µ—Ç –∑–∞—Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–Ω–æ–≥–æ –æ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –æ–Ω –º–æ–∂–µ—Ç –ø–æ–Ω–µ—Å—Ç–∏, –µ—Å–ª–∏ –µ–≥–æ –ø–æ–µ–∑–¥–∫–∞ –æ—Ç–º–µ–Ω–∏—Ç—Å—è –ø–æ –Ω–µ–∑–∞–≤–∏—Å—è—â–∏–º –æ—Ç –Ω–µ–≥–æ –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤–∞–º.',
                                      reply_markup=markup, parse_mode='Markdown')

            else:
                markup = self.markups('üîô')
                self.bot.send_message(message.chat.id, page, reply_markup=markup)

        elif page == 'property':
            if text == 'üîô':
                self.ch_page(id, "themes")
                markup = self.markups_themes['themes']
                self.bot.send_message(message.chat.id, self.texts['menu'], reply_markup=markup)

            elif text == '–ö–≤–∞—Ä—Ç–∏—Ä–∞':
                markup = telebot.types.InlineKeyboardMarkup()
                markup.add(
                    telebot.types.InlineKeyboardButton('–ü–æ–¥—Ä–æ–±–Ω–µ–µ', url='https://www.ingos.ru/property/flat/'))
                self.bot.send_message(message.chat.id, '*–î–æ–±—Ä–æ–≤–æ–ª—å–Ω–æ–µ —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã* ‚Äì —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞—Å—Ç—Ä–∞—Ö–æ–≤–∞—Ç—å –≤–∞—à–µ –Ω–µ–¥–≤–∏–∂–∏–º–æ–µ –∏ –¥–≤–∏–∂–∏–º–æ–µ (–≤ —Ç.—á. —Ü–µ–Ω–Ω–æ–µ) –∏–º—É—â–µ—Å—Ç–≤–æ –∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–¥ —Å–æ—Å–µ–¥—è–º–∏ –Ω–∞ —Å–ª—É—á–∞–π –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π, –≤–æ–∑–Ω–∏–∫—à–∏—Ö –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –ø–æ–∂–∞—Ä–∞, –≤–∑—Ä—ã–≤–∞, –∑–∞–ª–∏–≤–∞, —Å—Ç–∏—Ö–∏–π–Ω—ã—Ö –±–µ–¥—Å—Ç–≤–∏–π, –ø—Ä–æ—Ç–∏–≤–æ–ø—Ä–∞–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –∏ –¥—Ä—É–≥–∏—Ö –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Ä–∏—Å–∫–æ–≤.',
                                      reply_markup=markup, parse_mode='Markdown')

            elif text == '–ó–∞–≥–æ—Ä–æ–¥–Ω–∞—è –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å':
                markup = telebot.types.InlineKeyboardMarkup()
                markup.add(
                    telebot.types.InlineKeyboardButton('–†–∞—Å—Å—á–∏—Ç–∞—Ç—å', url='https://www.ingos.ru/property/house/calc/'))
                self.bot.send_message(message.chat.id, '*–°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–µ–Ω–∏–π* ‚Äì –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞—Å—Ç—Ä–∞—Ö–æ–≤–∞—Ç—å –¥–∞—á—É, –¥–æ–º –∑–∞ –≥–æ—Ä–æ–¥–æ–º, –±–∞–Ω—é, —Ö–æ–∑—è–π—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ—Å—Ç—Ä–æ–π–∫–∏, –æ–≥—Ä–∞–∂–¥–µ–Ω–∏—è –∏ –∏–Ω—ã–µ —Å–æ–æ—Ä—É–∂–µ–Ω–∏—è –Ω–∞ –ø—Ä–∏—É—Å–∞–¥–µ–±–Ω–æ–º —É—á–∞—Å—Ç–∫–µ, —ç–ª–µ–º–µ–Ω—Ç—ã –ª–∞–Ω–¥—à–∞—Ñ—Ç–Ω–æ–≥–æ –¥–∏–∑–∞–π–Ω–∞, –∞ —Ç–∞–∫–∂–µ —Å–∞–º–æ—Ö–æ–¥–Ω—ã–µ –º–∞—à–∏–Ω—ã –∏ –¥–≤–∏–∂–∏–º–æ–µ –∏–º—É—â–µ—Å—Ç–≤–æ. ',
                                      reply_markup=markup, parse_mode='Markdown')

            elif text == '–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å':
                markup = telebot.types.InlineKeyboardMarkup()
                markup.add(
                    telebot.types.InlineKeyboardButton('–†–∞—Å—Å—á–∏—Ç–∞—Ç—å', url='https://www.ingos.ru/property/calc/?calculator=express_go'))
                self.bot.send_message(message.chat.id, '*–°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ –≥—Ä–∞–∂–¥–∞–Ω—Å–∫–æ–π –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏* ‚Äì —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞—Å—Ç—Ä–∞—Ö–æ–≤–∞—Ç—å –≤–∞—à—É –≥—Ä–∞–∂–¥–∞–Ω—Å–∫—É—é –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–¥ –ª–∏—Ü–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–º –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–∏—á–∏–Ω–µ–Ω –≤—Ä–µ–¥ –ø–æ –≤–∞—à–µ–π –≤–∏–Ω–µ –ø—Ä–∏ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏ –≤–∞—à–µ–≥–æ –∏–º—É—â–µ—Å—Ç–≤–∞.',
                                      reply_markup=markup, parse_mode='Markdown')

            elif text == '–ò–ø–æ—Ç–µ–∫–∞':
                markup = telebot.types.InlineKeyboardMarkup()
                markup.add(
                    telebot.types.InlineKeyboardButton('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å', url='https://www.ingos.ru/mortgage/'))
                self.bot.send_message(message.chat.id, '*–ò–ø–æ—Ç–µ—á–Ω–æ–µ —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ* ‚Äî —ç—Ç–æ —Å–ø–æ—Å–æ–± –∑–∞—â–∏—Ç—ã —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –∑–∞–µ–º—â–∏–∫–∞ –ø–æ –≤—ã–ø–ª–∞—Ç–µ –∫—Ä–µ–¥–∏—Ç–∞ –≤ —Å–ª—É—á–∞–µ –Ω–∞—Å—Ç—É–ø–ª–µ–Ω–∏—è –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã—Ö –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤ –∏ –æ–¥–Ω–æ –∏–∑ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –±–∞–Ω–∫–æ–≤ –∏ –∏–Ω—ã—Ö –∫—Ä–µ–¥–∏—Ç–Ω—ã—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–¥–∞—é—Ç –∏–ø–æ—Ç–µ—á–Ω—ã–µ –∫—Ä–µ–¥–∏—Ç—ã –∏ –∑–∞–π–º—ã.',
                                      reply_markup=markup, parse_mode='Markdown')

            else:
                markup = self.markups('üîô')
                self.bot.send_message(message.chat.id, page, reply_markup=markup)

        elif page == 'life':
            if text == 'üîô':
                self.ch_page(id, "themes")
                markup = self.markups_themes['themes']
                self.bot.send_message(message.chat.id, self.texts['menu'], reply_markup=markup)

            elif text == '–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–µ —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ':
                markup = telebot.types.InlineKeyboardMarkup()
                markup.add(
                    telebot.types.InlineKeyboardButton('–î–æ–±—Ä–æ–≤–æ–ª—å–Ω–æ–µ', url='https://www.ingos.ru/health_life/dms/'))
                markup.add(
                    telebot.types.InlineKeyboardButton('–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ', url='https://www.ingos.ru/health_life/oms/'))
                self.bot.send_message(message.chat.id, '*–°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ –≥—Ä–∞–∂–¥–∞–Ω—Å–∫–æ–π –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏* ‚Äì —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞—Å—Ç—Ä–∞—Ö–æ–≤–∞—Ç—å –≤–∞—à—É –≥—Ä–∞–∂–¥–∞–Ω—Å–∫—É—é –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–¥ –ª–∏—Ü–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–º –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–∏—á–∏–Ω–µ–Ω –≤—Ä–µ–¥ –ø–æ –≤–∞—à–µ–π –≤–∏–Ω–µ –ø—Ä–∏ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏ –≤–∞—à–µ–≥–æ –∏–º—É—â–µ—Å—Ç–≤–∞.',
                                      reply_markup=markup, parse_mode='Markdown')

            elif text == '':
                pass

            elif text == '':
                pass

            elif text == '':
                pass

            else:
                markup = self.markups('üîô')
                self.bot.send_message(message.chat.id, page, reply_markup=markup)

        elif page == 'investments':
            if text == 'üîô':
                self.ch_page(id, "themes")
                markup = self.markups_themes['themes']
                self.bot.send_message(message.chat.id, self.texts['menu'], reply_markup=markup)

            else:
                markup = self.markups('üîô')
                self.bot.send_message(message.chat.id, page, reply_markup=markup)

        else:
            self.ch_page(id, "themes")
            markup = self.markups_themes['themes']
            self.bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞.", reply_markup=markup)

    def get_user(self, user_id):
        return self.users[str(user_id)]

    def check_user(self, message):
        # Check User in Dictionary Users
        if message.chat.id < 0:
            return True

        if str(message.chat.id) in self.users:
            self.get_user(message.chat.id)['time'] = int(time.time())
            if self.get_user(message.chat.id)["chat"]:
                threading.Thread(target=self.f.update_users, args=[self.users]).start()
                return False
            else:
                threading.Thread(target=self.f.update_users, args=[self.users]).start()
                return True

        else:
            self.clear()
            logging.warning('New User')

            self.users[str(message.chat.id)] = {
                "name": message.from_user.first_name,
                "sname": message.from_user.last_name,
                "username": message.from_user.username,
                "page": "start",
                "chat": True,
                "start": int(time.time()),
                "time": int(time.time())

            }

            threading.Thread(target=self.f.update_users, args=[self.users]).start()
            return False

    def send_message_thread(
            self,
            chat_id,
            text,
            disable_web_page_preview=None,
            reply_to_message_id=None,
            reply_markup=None,
            parse_mode=None,
            disable_notification=None
    ):
        threading.Thread(target=self.bot.send_message, args=[
            chat_id,
            text,
            disable_web_page_preview,
            reply_to_message_id,
            reply_markup,
            parse_mode,
            disable_notification
        ]).start()

    def markups(self, *args):
        markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
        if len(args):
            for i in args:
                if i is None:
                    return telebot.types.ReplyKeyboardRemove()

                if type(i) in (str, int):
                    markup.row(str(i))
                else:
                    markup.row(*i)

        else:
            return telebot.types.ReplyKeyboardRemove()
        return markup

    def listener(self, message):
        pass

    def clear(self):
        if os.name == 'nt':
            os.system('cls')
        else:
            os.system('clear')

        print(self.f.config['name'], self.f.config['version'])

    def run(self):
        logging.info('New Proccess Bot')

        try:
            # self.bot.set_update_listener(self.listener)
            self.bot.polling(True)

        except telebot.apihelper.ApiException:
            threading.Thread(target=self.run).start()

        #except Exception as Error:
            #print('Error %s' % Error)


class FilesExchange:
    def __init__(self, debug=False):
        self.busy = False
        self.boot(debug)

    def boot(self, debug=False):
        if self.busy:
            return

        self.busy = True

        files = {'config', 'users', 'strings'}

        opens = {}

        for file in files:
            filename = '%s.json' % file
            if not os.access(filename, mode=os.F_OK):
                if debug: logging.info('Not Found File as "%s"' % filename)
                with open(file=filename, mode='w') as body:
                    if file == 'strings':
                        text = '{"ping": ["Of course I work!", "I\'m already work!"], "stickers_like":["CAADAgADHA4AAkKvaQABYnIuek_e3-wC", "CAADAgADpwEAAzigCiq77pQrZXN5Ag", "CAADAgAD3AADWQMDAAH0zFgaGiqNBgI", "CAADBAADTQIAAuJy2QABuawJiJx0CBoC", "CAADAgADPQMAAu7UDQABcLqwo2_UmeAC"]}'
                    elif file == 'config':
                        text = '{"token": "", "version": "0.0.1", "name": "TestDmRobot"}'
                    else:
                        text = '{}'
                    body.write(text)
            opens[file] = open(file=filename, mode='r')

        self.users = json.loads(opens['users'].read())
        self.config = json.loads(opens['config'].read())
        self.strings = json.loads(opens['strings'].read())

        opens['users'].close()
        opens['config'].close()
        opens['strings'].close()

        self.busy = False

    def update_users(self, users):
        with open(file='users.json', mode='w') as file:
            file.write(json.dumps(users))


if __name__ == '__main__':
    bot = TelegramBot()
    bot.run()
